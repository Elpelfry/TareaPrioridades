@page "/RPrioridades";
@page "/RPrioridades/{PrioridadId:int}";
@rendermode InteractiveServer
@inject PrioridadesBLL prioridadesBLL;

<EditForm Model="prioridades" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>Registro de Prioridades</h1>
        </div>
        <div class="card-body">
            <label>PrioridadID</label>
            <div class="input-group">
                <InputNumber @bind-Value="prioridades.PrioridadId" @oninput="MensajeGuardar" min="0" class="number-input"></InputNumber>
                <button type="button" class="btn btn-primary bi bi-search" @onclick="Buscar"></button>
            </div>
            <div >
                <label>Descripci&oacute;n</label>
                <InputText @bind-Value="prioridades.Descripcion" @oninput="MensajeGuardar" class="form-control" ></InputText>
                <ValidationMessage For="@(() => prioridades.Descripcion)"/>
            </div>
            <label>Dias Compromiso</label>
            <div>
                <InputNumber @bind-Value="prioridades.DiasCompromiso" @oninput="MensajeGuardar" min="0" class="number-input"></InputNumber>
                <ValidationMessage For="@(() => prioridades.DiasCompromiso)"/>
            </div>
        </div>
        <div class="card-footer">
            <div class="input-group">
                <button type="button" class="btn btn-primary bi bi-file-earmark-diff-fill" @onclick="Nuevo" @oninput="MensajeGuardar">Nuevo</button>
                <button type="button" class="btn btn-danger bi bi-trash-fill" @onclick="Eliminar">Eliminar</button>
                <button type="submit" class="btn btn-success bi bi-floppy-fill">Guardar</button>
            </div>
            @if (resultado==1)
            {
                <p class="alert-success alert-size">@mensaje</p>
            }
            else if(resultado == 2)
            {
                <p class="alert-danger alert-size">@mensaje</p>
            }
        </div>
    </div>
</EditForm>


@code {

    [Parameter]
    public int PrioridadId { get; set; }
    public Prioridades prioridades = new Prioridades();
    public string? mensaje { get; set; }
    public int resultado { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (PrioridadId > 0)
        {
            prioridades.PrioridadId = PrioridadId;
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        MensajeGuardar();
        var prioridadEncontrada = await prioridadesBLL.Buscar(prioridades.PrioridadId);
        if (prioridadEncontrada != null)
        {
            this.prioridades = prioridadEncontrada;
        }
        else 
        {
            this.prioridades = new Prioridades();
            resultado = 2;
            mensaje = "Registro no Encontrado";
        }
    }

    public void Nuevo()
    {
        this.prioridades = new Prioridades();
        MensajeGuardar();
    }

    public async Task Guardar()
    {
        var guardo = await prioridadesBLL.Guardar(this.prioridades);
        if(guardo)
        {
            resultado = 1;
            mensaje = "Registro Guardado";
            Nuevo();
        }
        else
        {
            resultado = 2;
            mensaje = "Registro No Guardado Descripción Ya Existe";
        }
    }

    public async Task Eliminar()
    {
        if (await prioridadesBLL.Existe(prioridades.PrioridadId))
        {
            await prioridadesBLL.Eliminar(this.prioridades);
            this.Nuevo();
            resultado = 1;
            mensaje = "Registro Eliminado";
        }
        else
        {
            resultado = 2;
            mensaje = "No Eliminado";
        }
    }

    public void MensajeGuardar()
    {
        resultado = 0;
        mensaje = string.Empty;
    }
}
